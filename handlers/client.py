from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from datetime import datetime, timedelta
from start.create_bot import bot, dispetcher, db, qiwi
import keyboards.client_kb as kb
import Constants as const 

async def anti_flood(*args, **kwargs):
    ans = args[0]
    await ans.answer("–ù–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–µ–≥–∞–π —Å–≤–æ—é —Ä—É–∫—É, –¥—Ä—É–≥ –º–æ–π üôÇ")


#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –∫–∞–Ω–∞–ª–∞
async def check_sub_channel(user_id):
    chat_member = await bot.get_chat_member(chat_id = const.TELEGRAM_PUBLIC_CHAT_ID, user_id = user_id)
    return chat_member['status'] != 'left'


#–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def create_link_to_group():
    expire_date = datetime.now() + timedelta(days = 1)
    link = await bot.create_chat_invite_link(const.TELEGRAM_PRIVATE_CHAT_ID, expire_date.timestamp, 1)
    return link.invite_link 


#–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ –∫–∞–Ω–∞–ª 
async def send_payment_invoice(user_id, price, rate, bill_url):
    await bot.send_message(user_id, 
                    f'‚è≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚è≥\n\n'

                    f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
                    f'‚Äî –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {price} RUB\n'
                    f'‚Äî –ü–µ—Ä–∏–æ–¥: {rate}\n'
                    f'‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n\n'
                    f'–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:\n'
                    f'‚Äî –ö–∞–Ω–∞–ª ¬´üî•–ê—Ä—Ö–∏–≤ –•–µ–Ω—Ç–∞–πüî•¬ª\n\n'
                    
                    f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ QIWI ü•ù:\n{bill_url}', reply_markup = kb.payment_menu)

    
@dispetcher.callback_query_handler(text = "check_sub_to_channel")
@dispetcher.throttled(anti_flood, rate = 1)
async def is_sub_to_channel(query: types.CallbackQuery):
    await query.answer("üëâ –ü–û–î–ü–ò–°–ê–õ–°–Ø üëà")
    
    if await check_sub_channel(query.from_user.id) == False:
        await bot.send_message(query.from_user.id, "‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
    else:
        await bot.send_message(query.from_user.id, 
            'üèÜ –ö–æ–Ω–Ω–∏—á–∏–≤–∞, –ª—é–±–∏—Ç–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–∞! üèÜ\n\n'
            '–Ø –Ω–∞—à–µ–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä —Å–∞–º—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π, –±–µ–∑ –ø–æ–º–æ—â–∏ —à–∫–æ–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞ üöå\n\n'
            '–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —É –º–µ–Ω—è –µ—Å—Ç—å –í–°–Å, —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—à—å! ü•∞\n\n'
            'üî• –ë—ã—Å—Ç—Ä–µ–π –∑–∞–ª–µ—Ç–∞–π –∫ –Ω–∞–º –Ω–∞ –∫–∞–Ω–∞–ª üî•', reply_markup = kb.main_menu)
        

@dispetcher.message_handler(commands = ['start'])
@dispetcher.throttled(anti_flood, rate = 1)
async def process_start_command(message: types.Message):
    if await check_sub_channel(message.from_user.id) == False:
        await message.reply("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
        return

    if await db.user_exists(message.from_user.id) == False:
        await db.add_user(message.from_user.id)

    await message.reply('üèÜ –ö–æ–Ω–Ω–∏—á–∏–≤–∞, –ª—é–±–∏—Ç–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–∞! üèÜ\n\n'
                        '–Ø –Ω–∞—à–µ–ª —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±, –∫–∞–∫ —Ç–µ–±–µ –ø–æ–ø–∞—Å—Ç—å –≤ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∏—Ä —Å–∞–º—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö —Ñ–∞–Ω—Ç–∞–∑–∏–π, –±–µ–∑ –ø–æ–º–æ—â–∏ —à–∫–æ–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞ üöå\n\n'
                        '–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —É –º–µ–Ω—è –µ—Å—Ç—å –í–°–Å, —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—à—å! ü•∞\n\n'
                        'üî• –ë—ã—Å—Ç—Ä–µ–π –∑–∞–ª–µ—Ç–∞–π –∫ –Ω–∞–º –Ω–∞ –∫–∞–Ω–∞–ª üî•' , reply_markup = kb.main_menu)
    

@dispetcher.message_handler(Text(equals = "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
@dispetcher.throttled(anti_flood, rate = 1)
async def show_help_admin(message: types.Message):
    if await check_sub_channel(message.from_user.id) == False:
        await message.reply("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª!", reply_markup = kb.sub_check_menu)
        return

    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer("ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞\nüì® –ü–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @coo3n")
        

@dispetcher.message_handler(Text(equals = "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"))
@dispetcher.throttled(anti_flood, rate = 1)
async def show_user_account(message: types.Message):
    if await check_sub_channel(message.from_user.id) == False:
        await message.reply("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
        return

    await bot.delete_message(message.from_user.id, message.message_id)
    
    result = await db.get_tarif_user(message.from_user.id)
    channel = "üî• –ê—Ä—Ö–∏–≤ –•–µ–Ω—Ç–∞—è üî•"
    tarif = "" 

    match result[0][0]:
        case 0: 
            await message.answer("üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç\n‚Äî ID: " + str(message.from_user.id) + "\n‚Äî –ü–æ–¥–ø–∏—Å–∫–∞: ‚ùóÔ∏è–û–¢–°–£–¢–°–¢–í–£–ï–¢‚ùóÔ∏è") 
            return
        case 1:
            tarif = "üéØ –ú–ï–°–Ø–¶  üéØ"
        case 2:
            tarif = "üíò –ü–û–õ–ì–û–î–ê üíò"
        case 3:
            tarif = "‚ö° –¶–ï–õ–´–ô –ì–û–î ‚ö°"
        case 4:
            tarif = "üî• –ù–ê–í–°–ï–ì–î–ê üî•"
    
    await message.answer("üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç\n‚Äî ID: " + str(message.from_user.id) + "\n‚Äî –ü–æ–¥–ø–∏—Å–∫–∞: " + channel + "\n‚Äî –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: " + tarif)
    

@dispetcher.message_handler(Text(equals = "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"))
@dispetcher.throttled(anti_flood, rate = 1)
async def show_all_rates(message: types.Message):
    if await check_sub_channel(message.from_user.id) == False:
        await message.reply("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
        return

    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer("üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã \n\nü•ù –í—ã–±–∏—Ä–∞–π –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–µ–±—è —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏ –æ–ø–ª–∞—Ç—É –ø–æ QIWI! ü•ù", reply_markup = kb.choice_menu_rate)


@dispetcher.callback_query_handler(text = "rate_month")
@dispetcher.throttled(anti_flood, rate = 2)
async def top_up_balance_month(query: types.CallbackQuery):
    if await check_sub_channel(query.from_user.id) == False:
        await query.answer("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
        return

    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ üéØ –ú–ï–°–Ø–¶  üéØ")
    
    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 149, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, bill.bill_id[21:], const.RATE_MONTH)
    await send_payment_invoice(query.from_user.id, 149, "üéØ –ú–ï–°–Ø–¶  üéØ", bill.pay_url)
   
    
@dispetcher.callback_query_handler(text = "rate_six_months")
@dispetcher.throttled(anti_flood, rate = 2)
async def top_up_balance_six_month(query: types.CallbackQuery):
    if await check_sub_channel(query.from_user.id) == False:
        await query.answer("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
        return

    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ üíò –ü–û–õ–ì–û–î–ê üíò")

    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 249, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, bill.bill_id[21:], const.RATE_SIX_MONTHS)
    await send_payment_invoice(query.from_user.id, 249, "üíò –ü–û–õ–ì–û–î–ê üíò", bill.pay_url)


@dispetcher.callback_query_handler(text = "rate_year")
@dispetcher.throttled(anti_flood, rate = 2)
async def top_up_balance_year(query: types.CallbackQuery):
    if await check_sub_channel(query.from_user.id) == False:
        await query.answer("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
        return

    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ ‚ö° –¶–ï–õ–´–ô –ì–û–î ‚ö°")

    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 499, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, bill.bill_id[21:], const.RATE_YEAR)
    await send_payment_invoice(query.from_user.id, 499, "‚ö° –¶–ï–õ–´–ô –ì–û–î ‚ö°", bill.pay_url)


@dispetcher.callback_query_handler(text = "rate_forever")
@dispetcher.throttled(anti_flood, rate = 2)
async def top_up_balance_forever(query: types.CallbackQuery):
    if await check_sub_channel(query.from_user.id) == False:
        await query.answer("‚ùó –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ‚ùó", reply_markup = kb.sub_check_menu)
        return
        
    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ üî• –ù–ê–í–°–ï–ì–î–ê üî•")

    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 799, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, bill.bill_id[21:], const.RATE_FOREVER)
    await send_payment_invoice(query.from_user.id, 799, "üî• –ù–ê–í–°–ï–ì–î–ê üî•", bill.pay_url)
    

@dispetcher.callback_query_handler(text = "close_payment")
async def close_payment_check(query: types.CallbackQuery):
    await query.answer("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚ùå")
    
    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await db.delete_check(query.from_user.id)
    
    await bot.delete_message(query.from_user.id, query.message.message_id)

 
@dispetcher.callback_query_handler(text = "check_payment")
@dispetcher.throttled(anti_flood, rate = 2)
async def check_payment(query: types.CallbackQuery):
    await query.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ")
    
    if await db.exist_bill_—Åheck(query.from_user.id) == False:
        await bot.delete_message(query.from_user.id, query.message.message_id)
        await bot.send_message(query.from_user.id, "üö© –î–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üö©") 
        return 
    
    info_for_check = await db.get_info_for_check(query.from_user.id)               
        
    if len(info_for_check) != 0:
        status_bill_check = str(qiwi.check(bill_id = "WhiteApfel-PyQiwiP2P-" + str(info_for_check[0][2])).status)
        
        match status_bill_check:
            case "WAITING":
                await bot.send_message(query.from_user.id, "üïí –≠—Ç–æ—Ç —Å—á—ë—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–¥–∏–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã üïí")
                return
            case "PAID":
                await db.set_rate_to_user(query.from_user.id, info_for_check[0][3])
                link_group = await create_link_to_group()
                await bot.send_message(query.from_user.id, "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç! üéâ\n–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª:\n" + str(link_group))
            case "EXPIRED":
                await bot.send_message(query.from_user.id, "‚åõ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—á—ë—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ! ‚åõ")
            case _:
                await bot.send_message(query.from_user.id, "üõ†Ô∏è –°—á—ë—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ! üõ†Ô∏è")        

        await db.delete_check(query.from_user.id)     
    else: 
        await bot.send_message(query.from_user.id, "üö© –î–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ! üö©") 


def register_client_handlers(dispetcher: Dispatcher):
    dispetcher.register_callback_query_handler(is_sub_to_channel, text = "check_sub_to_channel")
    dispetcher.register_message_handler(process_start_command, commands = ['start'])
    dispetcher.register_message_handler(show_help_admin, Text(equals = "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
    dispetcher.register_message_handler(show_user_account, Text(equals = "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"))
    dispetcher.register_message_handler(show_all_rates, Text(equals = "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"))
    dispetcher.register_callback_query_handler(top_up_balance_month, text = "rate_month")
    dispetcher.register_callback_query_handler(top_up_balance_six_month, text = "rate_six_months")
    dispetcher.register_callback_query_handler(top_up_balance_year, text = "rate_year")
    dispetcher.register_callback_query_handler(top_up_balance_forever, text = "rate_forever")
    dispetcher.register_callback_query_handler(close_payment_check, text = "close_payment")
    dispetcher.register_callback_query_handler(check_payment, text = "check_payment")