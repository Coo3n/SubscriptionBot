from datetime import datetime, timedelta
from aiogram import Bot, types
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from Token import TG_TOKEN, QIWI_TOKEN
from DataBase import DataBase
from pyqiwip2p import QiwiP2P
import Keyboard as kb 
import random


bot = Bot(token = TG_TOKEN)
storage = MemoryStorage()
dispetcher = Dispatcher(bot, storage = storage)
db = DataBase()
qiwi = QiwiP2P(auth_key = QIWI_TOKEN)

TELEGRAM_CHAT_ID = -1001635609543
RATE_MONTH      = 1
RATE_SIX_MONTHS = 2
RATE_YEAR       = 3
RATE_FOREVER    = 4

async def anti_flood(*args, **kwargs):
    ans = args[0]
    await ans.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ! –ù–∞–∂–∏–º–∞–π—Ç–µ —Å–ø–æ–∫–æ–π–Ω–µ–µ :)")
        

@dispetcher.message_handler(commands = ['start'])
@dispetcher.throttled(anti_flood, rate = 1)
async def process_start_command(message: types.Message):
    user_exists = await db.user_exists(message.from_user.id)
    if user_exists == False:
        await db.add_user(message.from_user.id)

    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –¥–∞–Ω–Ω—ã–π –ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏\n–ø–æ –ø—Ä–æ–¥–∞–∂–µ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª!\n–ß—Ç–æ–±—ã –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫! ", reply_markup = kb.main_menu)


@dispetcher.message_handler(Text(equals = "ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def show_help_admin(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer("ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞\nüì® –ü–æ –≤—Å–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äî @coo3n")
        

@dispetcher.message_handler(Text(equals = "üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"))
@dispetcher.throttled(anti_flood, rate = 1)
async def show_user_account(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message_id)
    cnt_money = await db.get_tarif_user(message.from_user.id)
    await message.answer("üë§ –ú–æ–π –∞–∫–∫–∞—É–Ω—Ç\n‚Äî ID: " + str(message.from_user.id) + "\n‚Äî –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + str(cnt_money[0][0]) + " —Ä—É–±")
    

@dispetcher.message_handler(Text(equals = "üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"))
async def show_all_rates(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message_id)
    await message.answer("üóì –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã \n–í—ã–±–∏—Ä–∞–π –ª—é–±–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–µ–±—è —Ç–∞—Ä–∏—Ñ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏ –æ–ø–ª–∞—Ç—É –ø–æ ü•ùQIWI!", reply_markup = kb.choice_menu_rate)


@dispetcher.callback_query_handler(text = "rate_month")
async def top_up_balance_month(query: types.CallbackQuery):
    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ üéØ –ú–ï–°–Ø–¶  üéØ")
    
    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 150, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, RATE_MONTH)
    await bot.send_message(query.from_user.id, 
                    '‚è≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚è≥\n\n'
                    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
                    '‚Äî –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: 150 RUB\n'
                    '‚Äî –ü–µ—Ä–∏–æ–¥: üéØ –ú–ï–°–Ø–¶ üéØ\n'
                    '‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n\n'
                    '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:\n'
                    '‚Äî –ö–∞–Ω–∞–ª ¬´üî•–ê—Ä—Ö–∏–≤ –•–µ–Ω—Ç–∞–πüî•¬ª\n\n'
                    
                    f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ QIWI ü•ù:\n{bill.pay_url}', reply_markup = kb.payment_menu)
   
        


@dispetcher.callback_query_handler(text = "rate_six_months")
async def top_up_balance_six_month(query: types.CallbackQuery):
    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ üíò –ü–û–õ–ì–û–î–ê üíò")

    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 250, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, RATE_SIX_MONTHS)
    await bot.send_message(query.from_user.id, 
                    '‚è≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚è≥\n\n'
                    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
                    '‚Äî –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: 250 RUB\n'
                    '‚Äî –ü–µ—Ä–∏–æ–¥: üíò –ü–û–õ–ì–û–î–ê üíò\n'
                    '‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n\n'
                    '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:\n'
                    '‚Äî –ö–∞–Ω–∞–ª ¬´üî•–ê—Ä—Ö–∏–≤ –•–µ–Ω—Ç–∞–πüî•¬ª\n\n'
                    
                    f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ QIWI ü•ù:\n{bill.pay_url}', reply_markup = kb.payment_menu)


@dispetcher.callback_query_handler(text = "rate_year")
async def top_up_balance_year(query: types.CallbackQuery):
    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ ‚ö° –¶–ï–õ–´–ô –ì–û–î ‚ö°")

    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 500, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, RATE_YEAR)
    await bot.send_message(query.from_user.id, 
                    '‚è≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚è≥\n\n'
                    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
                    '‚Äî –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: 500 RUB\n'
                    '‚Äî –ü–µ—Ä–∏–æ–¥: ‚ö° –¶–ï–õ–´–ô –ì–û–î ‚ö°\n'
                    '‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n\n'
                    '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:\n'
                    '‚Äî –ö–∞–Ω–∞–ª ¬´üî•–ê—Ä—Ö–∏–≤ –•–µ–Ω—Ç–∞–πüî•¬ª\n\n'
                    
                    f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ QIWI ü•ù:\n{bill.pay_url}', reply_markup = kb.payment_menu)

@dispetcher.callback_query_handler(text = "rate_forever")
async def top_up_balance_forever(query: types.CallbackQuery):
    await bot.delete_message(query.from_user.id, query.message.message_id)
    await query.answer("–¢–∞—Ä–∏—Ñ üî• –ù–ê–í–°–ï–ì–î–ê üî•")

    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await bot.send_message(query.from_user.id, "‚ö†Ô∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! ‚ö†Ô∏è")
        await db.delete_check(query.from_user.id)

    bill = qiwi.bill(amount = 800, lifetime = 5, comment = "–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã - 5 –º–∏–Ω—É—Ç!")
    
    await db.add_check(query.from_user.id, RATE_FOREVER)
    await bot.send_message(query.from_user.id, 
                    '‚è≥ –°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚è≥\n\n'
                    '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n'
                    '‚Äî –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: 800 RUB\n'
                    '‚Äî –ü–µ—Ä–∏–æ–¥: üî• –ù–ê–í–°–ï–ì–î–ê üî•\n'
                    '‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n\n'
                    '–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞–º —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:\n'
                    '‚Äî –ö–∞–Ω–∞–ª ¬´üî•–ê—Ä—Ö–∏–≤ –•–µ–Ω—Ç–∞–πüî•¬ª\n\n'
                    
                    f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ QIWI ü•ù:\n{bill.pay_url}', reply_markup = kb.payment_menu)
    

@dispetcher.callback_query_handler(text = "close_payment")
async def close_payment_check(query: types.CallbackQuery):
    await query.answer("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚ùå")
    
    if await db.exist_bill_—Åheck(query.from_user.id) == True:
        await db.delete_check(query.from_user.id)
    
    await bot.delete_message(query.from_user.id, query.message.message_id)

@dispetcher.callback_query_handler(text = "check_payment")
async def check_payment(query: types.CallbackQuery):
    await query.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É ‚úÖ")
    
    if await db.exist_bill_—Åheck(query.from_user.id) == False:
        await bot.delete_message(query.from_user.id, query.message.message_id)
        await bot.send_message(query.from_user.id, "üö© –î–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ! üö©") 
    else: 
        pass



@dispetcher.message_handler(Text(equals = "link"))
async def create_link_to_group(message: types.Message):
    expire_date = datetime.now() + timedelta(days = 1)
    link = await bot.create_chat_invite_link(TELEGRAM_CHAT_ID, expire_date.timestamp, 1)

    print(link.invite_link) 

if __name__ == '__main__':
    executor.start_polling(dispetcher, skip_updates = True)